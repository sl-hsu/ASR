{"remainingRequest":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/uma/Documents/ActivitySensing/project/asr/ASR/docs/doc7.md","dependencies":[{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/docs/doc7.md","mtime":1607017923982},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-doc-7-md-e3d.json","mtime":1607034908456},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/cache-loader/dist/cjs.js","mtime":1601567416106},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/babel-loader/lib/index.js","mtime":1606517689043},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1606517692821},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1606517692420}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
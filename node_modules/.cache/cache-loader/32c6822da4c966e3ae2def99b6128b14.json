{"remainingRequest":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/uma/Documents/ActivitySensing/project/asr/ASR/docs/doc2.md","dependencies":[{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/docs/doc2.md","mtime":1607015389285},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-doc-2-md-df3.json","mtime":1607034908456},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/cache-loader/dist/cjs.js","mtime":1601567416106},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/babel-loader/lib/index.js","mtime":1606517689043},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1606517692821},{"path":"/Users/uma/Documents/ActivitySensing/project/asr/ASR/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1606517692420}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL3VtYS9Eb2N1bWVudHMvQWN0aXZpdHlTZW5zaW5nL3Byb2plY3QvYXNyL0FTUi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2lkOidkb2MyJyx0aXRsZTonSW50cm9kdWN0aW9uICYgTW90aXZhdGlvbicsc2lkZWJhcl9sYWJlbDonSW50cm9kdWN0aW9uJyxjdXN0b21fZWRpdF91cmw6bnVsbH07ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6ImRvYzIiLCJpZCI6ImRvYzIiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiSW50cm9kdWN0aW9uICYgTW90aXZhdGlvbiIsImRlc2NyaXB0aW9uIjoiSHVtYW4gYWN0aXZpdHkgcmVjb2duaXRpb24gY2FuIHByb3ZpZGUgY29udGV4dCBvbiB0aGUgaW5kaXZpZHVhbOKAmXMgbGlmZXN0eWxlIGFuZCBhaWQgaW4gcHJvdmlkaW5nIHZhbHVhYmxlIGluZm9ybWF0aW9uIHRvIHRoZSBwZXJzb24gb24gdGhlaXIgZGFpbHkgaW50YWtlIG9mIGZvb2QsIHBoeXNpY2FsIGFjdGl2aXR5LCBhbmQgb3RoZXIgcmVxdWlyZWQgaW5mb3JtYXRpb24uIEl0IGJlY29tZXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgZWxkZXJjYXJlIGFuZCBoZWFsdGggY2FyZSBhcyBhIGNvbnRleHQgYmFzZWQgYXNzaXN0aXZlIHRlY2hub2xvZ3ksICBpbiBhZGRpdGlvbiB0byB0aGlzLCByZWNvZ25pemluZyB0aGUgYWN0aXZpdHkgY2FuIGhlbHAgc3lzdGVtcyB0byBnZW5lcmF0ZSBwZXJzb25hbGl6ZWQgcmVjb21tZW5kYXRpb25zIGZvciBhIHVzZXIgYW5kIGVucmljaCB0aGVpciBleHBlcmllbmNlLiBTZW5zb3IgYmFzZWQgYWN0aXZpdHkgcmVjb2duaXRpb24gaXMgcHJldmFsZW50IGFuZCBtb2JpbGUgZGV2aWNlcyBsaWtlIHNtYXJ0cGhvbmVzIGFyZSBvbmUgYW1vbmcgdGhlIHViaXF1aXRvdXMgdGVjaG5vbG9neSB0byBtb25pdG9yIHRoZSB1c2Vy4oCZcyBsaWZlc3R5bGUuIEl0IGlzIGVzdGltYXRlZCB0aGF0IHRoZXJlIGFyZSA1LjIzIGJpbGxpb24gcGVvcGxlIHRoYXQgaGF2ZSBhIG1vYmlsZSBkZXZpY2UgaW4gdGhlIHdvcmxkIGFtb3VudGluZyB0byBtb3JlIHRoYW4gNjYuNzklIG9mIHRoZSB3b3JsZCdzIHBvcHVsYXRpb24uIiwic291cmNlIjoiQHNpdGUvZG9jcy9kb2MyLm1kIiwic2x1ZyI6Ii9kb2MyIiwicGVybWFsaW5rIjoiL0FTUi9kb2NzL2RvYzIiLCJlZGl0VXJsIjpudWxsLCJ2ZXJzaW9uIjoiY3VycmVudCIsInNpZGViYXJfbGFiZWwiOiJJbnRyb2R1Y3Rpb24iLCJzaWRlYmFyIjoic29tZVNpZGViYXIiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IkludHJvZHVjdGlvbiIsInBlcm1hbGluayI6Ii9BU1IvZG9jcy8ifSwibmV4dCI6eyJ0aXRsZSI6IlJlbGF0ZWQgV29yayAmIENvbnRyaWJ1dGlvbnMiLCJwZXJtYWxpbmsiOiIvQVNSL2RvY3MvZG9jMyJ9fTsvKiBAanN4UnVudGltZSBjbGFzc2ljICovIC8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHJpZ2h0VG9jPVtdO2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwIixudWxsLGBIdW1hbiBhY3Rpdml0eSByZWNvZ25pdGlvbiBjYW4gcHJvdmlkZSBjb250ZXh0IG9uIHRoZSBpbmRpdmlkdWFs4oCZcyBsaWZlc3R5bGUgYW5kIGFpZCBpbiBwcm92aWRpbmcgdmFsdWFibGUgaW5mb3JtYXRpb24gdG8gdGhlIHBlcnNvbiBvbiB0aGVpciBkYWlseSBpbnRha2Ugb2YgZm9vZCwgcGh5c2ljYWwgYWN0aXZpdHksIGFuZCBvdGhlciByZXF1aXJlZCBpbmZvcm1hdGlvbi4gSXQgYmVjb21lcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBlbGRlcmNhcmUgYW5kIGhlYWx0aCBjYXJlIGFzIGEgY29udGV4dCBiYXNlZCBhc3Npc3RpdmUgdGVjaG5vbG9neSwgIGluIGFkZGl0aW9uIHRvIHRoaXMsIHJlY29nbml6aW5nIHRoZSBhY3Rpdml0eSBjYW4gaGVscCBzeXN0ZW1zIHRvIGdlbmVyYXRlIHBlcnNvbmFsaXplZCByZWNvbW1lbmRhdGlvbnMgZm9yIGEgdXNlciBhbmQgZW5yaWNoIHRoZWlyIGV4cGVyaWVuY2UuIFNlbnNvciBiYXNlZCBhY3Rpdml0eSByZWNvZ25pdGlvbiBpcyBwcmV2YWxlbnQgYW5kIG1vYmlsZSBkZXZpY2VzIGxpa2Ugc21hcnRwaG9uZXMgYXJlIG9uZSBhbW9uZyB0aGUgdWJpcXVpdG91cyB0ZWNobm9sb2d5IHRvIG1vbml0b3IgdGhlIHVzZXLigJlzIGxpZmVzdHlsZS4gSXQgaXMgZXN0aW1hdGVkIHRoYXQgdGhlcmUgYXJlIDUuMjMgYmlsbGlvbiBwZW9wbGUgdGhhdCBoYXZlIGEgbW9iaWxlIGRldmljZSBpbiB0aGUgd29ybGQgYW1vdW50aW5nIHRvIG1vcmUgdGhhbiA2Ni43OSUgb2YgdGhlIHdvcmxkJ3MgcG9wdWxhdGlvbi4KU21hcnRwaG9uZXMgaGF2ZSBidWlsdC1pbiBhY2NlbGVyb21ldGVycyB3aGljaCBtYWtlIGl0IGNhcGFibGUgb2YgcmVjb2duaXppbmcgZGFpbHkgYWN0aXZpdGllcy4gVGhpcyBoZWxwcyB0byBnYXRoZXIgYW4gdW5kZXJzdGFuZGluZyBvZiB3aGF0IHBlb3BsZSBhcmUgZG9pbmcgYXQgYW55IG1vbWVudCBpbiB0aW1lLCBhbnRpY2lwYXRpbmcgd2hhdCB0aGV5IHdvdWxkIHByb2JhYmx5IGRvIG5leHQsIGFuZCBwcm92aWRpbmcgc2VydmljZXMgYXV0b21hdGljYWxseSBhbmQgYWNjb3JkaW5nIHRvIHRoZSBjb250ZXh0LmApLG1keCgicCIsbnVsbCxtZHgoImltZyIse2FsdDoiaW1nIixzcmM6cmVxdWlyZSgiIXVybC1sb2FkZXI/bGltaXQ9MTAwMDAmbmFtZT1hc3NldHMvaW1hZ2VzL1tuYW1lXS1baGFzaF0uW2V4dF0mZmFsbGJhY2s9ZmlsZS1sb2FkZXIhLi8uLi9zdGF0aWMvaW1nL2ludHJvLnBuZyIpLmRlZmF1bHR9KSksbWR4KCJwIixudWxsLGBUaGVyZSBhcmUgYSBjb3VwbGUgb2YgY2hhbGxlbmdlcyB0aGF0IGxpbWl0IHRoZSB0cmFuc2xhdGlvbiBvZiB0aGlzIGlkZWEgaW50byBhIHByb2R1Y3QsIGxpa2UgSW50cmFjbGFzcyBWYXJpYWJpbGl0eSwgSW50ZXJjbGFzcyBTaW1pbGFyaXR5LCBDbGFzcyBJbWJhbGFuY2UsIEdyb3VuZCBUcnV0aCBBbm5vdGF0aW9uLkluIHRoaXMgcHJvamVjdCB3ZSBzcGVjaWZpY2FsbHkgZm9jdXMgb24gdHdvIG1ham9yIGNoYWxsZW5nZXMgaW4gYnVpbGRpbmcgYW4gYWN0aXZpdHkgcmVjb2duaXRpb24gbW9kZWwsIGApLG1keCgicCIsbnVsbCxgRmlyc3Qgd2UgYWRkcmVzcyB0aGUgcHJvYmxlbSBvZiBJbnRyYWNsYXNzIHZhcmlhYmlsaXR5IHdoaWNoIGltcGxpZXMgdGhhdCBzYW1lIGFjdGl2aXR5IGNhbiBiZSBwZXJmb3JtZWQgZGlmZmVyZW50bHkgYnkgZGlmZmVyZW50IGluZGl2aWR1YWxzIGFuZCBldmVuIGRpZmZlcmVudGx5IGJ5IHRoZSBzYW1lIGluZGl2aWR1YWwgb3ZlciB0aW1lLiBUaGF0IG1lYW5zIHRoZSBjbGFzc2lmaWVyIG1heSBoYXZlIHBvb3IgcGVyZm9ybWFuY2Ugd2hlbiBpdCBpcyBhcHBsaWVkIHRvIHRoZSB0ZXN0IHNhbXBsZXMgZ2F0aGVyZWQgZnJvbSB0aGUgcGVvcGxlIGRpZmZlcmVudCBmcm9tIHRoZSB0cmFpbmluZyBzZXQuIE9uZSBzb2x1dGlvbiB0byB0aGlzIHByb2JsZW0gaXMgdG8gY29sbGVjdCB0aGUgbmVjZXNzYXJ5IGRhdGEgZnJvbSB0aGUgaW5kaXZpZHVhbHMgYmVmb3JlaGFuZCBhbmQgdGhpcyBjb3VsZCBiZSB0aW1lLWNvbnN1bWluZyBhbmQgaW5mZWFzaWJsZS5gKSxtZHgoInAiLG51bGwsYFNlY29uZCB3ZSBhZGRyZXNzIHRoZSBwcm9ibGVtIG9mIHNlbnNvciBwbGFjZW1lbnQgdmFyaWF0aW9ucywgaS5lIGFuIGFjdGl2aXR5IGF3YXJlIHByb2R1Y3Qgc2hvdWxkIGJlIGFibGUgdG8gcmVjb2duaXplIHRoZSBpbmRpdmlkdWFs4oCZcyBhY3Rpdml0eSB3aXRoIHZhcmlhdGlvbnMgaW4gdGhlIHBsYWNlbWVudCBvZiBzZW5zb3JzIGFzIHdlbGwsIHNpbmNlIG1vYmlsZSBwaG9uZXMgY2FuIGJlIGZyZWVseSBjYXJyaWVkIGFyb3VuZCBpbnN0ZWFkIG9mIGdldHRpbmcgc3RyYXBwZWQgdG8gYSBwYXJ0IG9mIHRoZSBib2R5IGxpa2UgYSBzbWFydCB3YXRjaCwgaXQgYmVjb21lcyBpbmNyZWFzaW5nbHkgZGlmZmljdWx0IHRvIGJ1aWxkIGEgcmVjb2duaXplciB0aGF0IGNhbiBhY2NvdW50IGZvciB0aGlzIHZhcmlhdGlvbi4gSGVuY2UgYW4gYWN0aXZpdHkgcmVjb2duaXRpb24gbWV0aG9kIHNob3VsZCBmdW5jdGlvbiBpbmRlcGVuZGVudCBvZiB0aGUgcGhvbmUncyBwb3NpdGlvbiBhbG9uZyB0aGUgc3ViamVjdCdzIGJvZHkgYW5kIHNob3VsZCBiZSBjYXBhYmxlIG9mIHByb3ZpZGluZyBoaWdoIHJlY29nbml0aW9uIHJlc3VsdHMgZXZlbiBpbiB0aGUgYWJzZW5jZSBvZiBhZGVxdWF0ZSBhbW91bnQgb2YgdHJhaW5pbmcgZGF0YSBmcm9tIGRpZmZlcmVudCBwb3NpdGlvbnMuYCksbWR4KCJwIixudWxsLGBXZSBsZXZlcmFnZSBhY3RpdmUgYW5kIHNlbWktc3VwZXJ2aXNlZCBsZWFybmluZyBtZXRob2RzIHRvIHNvbHZlIGZvciB0aGUgYWJvdmUgdHdvIHByb2JsZW1zLCBmaXJzdCBieSBidWlsZGluZyBhIHBlcnNvbmFsaXplZCBtb2RlbCBmb3IgYW4gaW5kaXZpZHVhbCwgYnkgY29udGludWFsbHkgbGVhcm5pbmcgZnJvbSB0aGUgYWN0aXZpdGllcyBvZiB0aGUgaW5kaXZpZHVhbCBvdmVyIHRpbWUsIGFuZCBzZWNvbmQgdG8gYWNjb3VudCBmb3Igc2Vuc29yIHBsYWNlbWVudCB2YXJpYXRpb25zLCB3ZSBhZGFwdCBhIG1vZGVsIHRyYWluZWQgb24gZGF0YSBjb2xsZWN0ZWQgZnJvbSBhIGluZGl2aWR1YWwgaW4gYSBwYXJ0aWN1bGFyIHNlbnNvciBwbGFjZW1lbnQgYW5kIGFkYXB0IGl0IHRvIHJlY29nbml6ZSBhY3Rpdml0aWVzIHdoZW4gdGhlIHBsYWNlbWVudCBjaGFuZ2VzLiBgKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}